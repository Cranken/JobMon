server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name localhost my-monitor-db.example.org;

    # Disable the directory listing output
    autoindex off;

    # Redirect to https
    location / {
        return 301 https://$host$request_uri;
    }
}

upstream frontendServer {
    server jobmon_frontend:3000;
}

upstream backendServer {
    server jobmon_backend:8080;
}

map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

server {
    listen 443 ssl default_server;
    listen [::]:443 ssl default_server;
    http2 on;
    server_name localhost my-monitor-db.example.org;

    # Use docker compose internal DNS server
    resolver 127.0.0.11;

    location / {
        proxy_pass http://frontendServer;
        proxy_http_version 1.1;
    }

    location /_next/webpack-hmr {
        proxy_pass http://frontendServer/_next/webpack-hmr;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }

    location ~ ^/(api|auth)/ {
        proxy_pass http://backendServer;
        proxy_http_version 1.1;
        proxy_buffering off;
        proxy_buffers 256 4k;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
    }

    # Disable the directory listing output
    autoindex off;

    # Documentation:
    # http://nginx.org/en/docs/http/ngx_http_ssl_module.html

    # Enables the specified protocols. The TLSv1.1 and TLSv1.2 parameters work only when the OpenSSL library of version 1.0.1 or higher is used
    ssl_protocols TLSv1.2 TLSv1.3;

    # Configure the allowed SSL ciphers
    # aNULL:  the cipher suites offering no authentication
    # eNUL:   the cipher suites offering no encryption
    # LOW:    low encryption cipher suites, currently those using 64 or 56 bit encryption algorithms but excluding export cipher suites
    # 3DES:   cipher suites using triple DES
    # MD5:    cipher suites using MD5
    # EXPORT: export encryption algorithms. Including 40 and 56 bits algorithms.
    # PSK:    cipher suites using pre-shared keys
    # DSS:    cipher suites using DSS authentication
    # ADH:    cipher suites effectively using DH authentication
    # MEDIUM: medium encryption cipher suites, currently some of those using 128 bit encryption
    # @STRENGTH: sort the current cipher list in order of encryption algorithm key length

    # Documentation:
    # man ciphers
    # Check remaining ciphers with:
    # openssl ciphers -v '!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXPORT:!PSK:!SRP:!DSS:!ADH:!AES128:!CAMELLIA128:!MEDIUM:HIGH@STRENGTH'
    ssl_ciphers !aNULL:!eNULL:!LOW:!3DES:!MD5:!EXPORT:!PSK:!SRP:!DSS:!ADH:!AES128:!CAMELLIA128:!ARIA128!MEDIUM:HIGH@STRENGTH;

    # Specifies that server ciphers should be preferred over client ciphers when using the SSLv3 and TLS protocols
    ssl_prefer_server_ciphers on;

    # Sets the types and sizes of caches that store session parameters
    ssl_session_cache shared:ssl_session_cache:1M;

    # Specifies a time during which a client may reuse the session parameters stored in a cache
    ssl_session_timeout 60m;

    # Enables or disables stapling of OCSP (Online Certificate Status Protocol)
    # responses by the server
    ssl_stapling on;
    # Enables or disables verification of OCSP (Online Certificate Status Protocol)
    # responses by the server.
    ssl_stapling_verify on;

    # Specifies a file with trusted CA certificates in the PEM format used to verify
    # client certificates and OCSP responses if ssl_stapling is enabled.
    #
    # In contrast to the certificate set by ssl_client_certificate, the list of
    # these certificates will not be sent to clients
    ssl_trusted_certificate /etc/nginx/certs.d/chain.pem;

    # Specifies a file with DH parameters for EDH ciphers
    #ssl_dhparam /etc/nginx/certs.d/dhparam.pem;

    # Specifies a file with the certificate in the PEM format for the given virtual server.
    # If intermediate certificates should be specified in addition to a primary certificate,
    # they should be specified in the same file in the following order:
    # the primary certificate comes first, then the intermediate certificates.
    # A secret key in the PEM format may be placed in the same file.
    ssl_certificate /etc/nginx/certs.d/fullchain.pem;

    # Specifies a file with the secret key in the PEM format for the given virtual server
    ssl_certificate_key /etc/nginx/certs.d/privkey.pem;
}
